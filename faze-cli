#!/usr/bin/env python3
"""
Main executable for module
"""

from datetime import datetime
from faze.core.bootstrap.structure import CreateStructure
from faze.core.helpers.term import ctinfo
from faze.core.modules.dirbruter import DirBruter
from faze.core.modules.fping import Fping
from faze.core.modules.httpscreenshot import HttpScreenshot
from faze.core.modules.nessus import Nessus
from faze.core.modules.nikto import Nikto
from faze.core.modules.nmap import NMap
from faze.core.modules.subbruter import SubBruter
from faze.core.modules.testports import TCPPorts
from faze.core.parsers.targets import BaseTargetsFile, PortTargetsFile
from faze.core.parsers.config import ParseConfig

if __name__ == "__main__":
    parseconfig = ParseConfig()
    # INITIAL TIME STUFF
    start_time = datetime.now()
    print("{i} START TIME: {t}".format(i=ctinfo, t=start_time))

    # CREATE STRUCTURE
    createstructure = CreateStructure()
    createstructure.main()

    # TARGETS
    basetargetsfile = BaseTargetsFile()
    basetargetsfile.main()

    # SUBBRUTER
    if parseconfig.subbruter_enabled:
        subbruter = SubBruter()
        subbruter.main()

    # FPING
    if parseconfig.fping_enabled:
        fping = Fping()
        fping.main()

    # NMAP
    if parseconfig.nmap_enabled:
        nmap = NMap()
        nmap.main()

    # TODO: write uptargets from scan_targets_dic to file/db(?)

    # PARSE HOSTS WITH OPEN PORTS
    porttargetsfile = PortTargetsFile()
    porttargetsfile.main()

    # DOUBLE CHECK PORTS DETECTED BY NMAP (and soon other services)
    tcpports = TCPPorts()
    tcpports.main()

    # HTTPSCREENSHOT
    if parseconfig.httpscreenshot_enabled:
        httpscreenshot = HttpScreenshot()
        httpscreenshot.main()

    # NIKTO
    if parseconfig.nikto_enabled:
        nikto = Nikto()
        nikto.main()

    # DIRBRUTER
    if parseconfig.dirbruter_enabled:
        dirbruter = DirBruter()
        dirbruter.main()

    # NMAP PHASE-2
    if parseconfig.nmap_phase_2_enabled:
        nmap = NMap()
        nmap.phase2()

    # NESSUS
    if parseconfig.nessus_enabled:
        nessus = Nessus()
        nessus.main()

    # FINISH UP TIME STUFF
    end_time = datetime.now()
    print("{i} END TIME: {t}".format(i=ctinfo, t=end_time))
    print("{i} TOOK {t}".format(i=ctinfo, t=end_time - start_time))
